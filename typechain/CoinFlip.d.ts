/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CoinFlipInterface extends ethers.utils.Interface {
  functions: {
    "flipCoin(bool,uint256)": FunctionFragment;
    "flipCoinHead(uint256)": FunctionFragment;
    "flipCoinTail(uint256)": FunctionFragment;
    "getLastFlips()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "usersFlips(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "flipCoin",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flipCoinHead",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flipCoinTail",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastFlips",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "usersFlips",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "flipCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flipCoinHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flipCoinTail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastFlips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usersFlips", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class CoinFlip extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CoinFlipInterface;

  functions: {
    flipCoin(
      bet: boolean,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flipCoinHead(
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flipCoinTail(
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLastFlips(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, boolean] & {
          user: string;
          timestamp: BigNumber;
          flipNumber: BigNumber;
          flipResult: boolean;
        })[]
      ]
    >;

    initialize(
      _tykheLuckyOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usersFlips(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        user: string;
        timestamp: BigNumber;
        flipNumber: BigNumber;
        flipResult: boolean;
      }
    >;
  };

  flipCoin(
    bet: boolean,
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flipCoinHead(
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flipCoinTail(
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLastFlips(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, boolean] & {
      user: string;
      timestamp: BigNumber;
      flipNumber: BigNumber;
      flipResult: boolean;
    })[]
  >;

  initialize(
    _tykheLuckyOracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usersFlips(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      user: string;
      timestamp: BigNumber;
      flipNumber: BigNumber;
      flipResult: boolean;
    }
  >;

  callStatic: {
    flipCoin(
      bet: boolean,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flipCoinHead(mode: BigNumberish, overrides?: CallOverrides): Promise<void>;

    flipCoinTail(mode: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getLastFlips(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, boolean] & {
        user: string;
        timestamp: BigNumber;
        flipNumber: BigNumber;
        flipResult: boolean;
      })[]
    >;

    initialize(
      _tykheLuckyOracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usersFlips(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        user: string;
        timestamp: BigNumber;
        flipNumber: BigNumber;
        flipResult: boolean;
      }
    >;
  };

  filters: {
    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    flipCoin(
      bet: boolean,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flipCoinHead(
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flipCoinTail(
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLastFlips(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _tykheLuckyOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usersFlips(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    flipCoin(
      bet: boolean,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flipCoinHead(
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flipCoinTail(
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLastFlips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _tykheLuckyOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usersFlips(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
