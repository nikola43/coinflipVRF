/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { CoinFlip, CoinFlipInterface } from "../../contracts/CoinFlip";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "consumerAddress",
        type: "address",
      },
    ],
    name: "addConsumer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receivingWallet",
        type: "address",
      },
    ],
    name: "cancelSubscription",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "bet",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "mode",
        type: "uint256",
      },
    ],
    name: "flipCoin",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastFlips",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "flipNumber",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "flipResult",
            type: "bool",
          },
        ],
        internalType: "struct Flip[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSubscriptionDetails",
    outputs: [
      {
        internalType: "uint96",
        name: "balance",
        type: "uint96",
      },
      {
        internalType: "uint64",
        name: "reqCount",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "consumers",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingRequestExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "consumerAddress",
        type: "address",
      },
    ],
    name: "removeConsumer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_randomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_requestId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_subscriptionId",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "topUpSubscription",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "usersFlips",
    outputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "flipNumber",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "flipResult",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a0604052600280546001600160a01b0319908116736a2aad07396b36fe02a22b33cf443582f682c82f17909155600380549091167384b9b910527ad5c03a9ca831909e21e236ea7b061790557fd4bb89654db74673a187bd804519e65e3f71a52bc55f11da7601a13dcf50531460045560058054660a0001000186a06001600160501b03199091161790553480156200009857600080fd5b506002546001600160a01b0390811660805260088054600160401b600160e01b031916336801000000000000000090810291909117918290556000600a819055600b5560035460405163095ea7b360e01b81529084169363095ea7b3936200010b9390041690600019906004016200041b565b6020604051808303816000875af11580156200012b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000151919062000434565b5060035460405163095ea7b360e01b81526001600160a01b039091169063095ea7b39062000188903090600019906004016200041b565b6020604051808303816000875af1158015620001a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ce919062000434565b50600254600080546001600160a01b0319166001600160a01b03909216919091179055620001fb62000201565b620004a0565b6008546801000000000000000090046001600160a01b031633146200022557600080fd5b6008546001600160401b031615620002835760405162461bcd60e51b815260206004820152601c60248201527f4120737562736372697074696f6e20616c726561647920657869737400000000604482015260640160405180910390fd5b604080516001808252818301909252600091602080830190803683370190505090503081600081518110620002bc57620002bc6200045f565b60200260200101906001600160a01b031690816001600160a01b03168152505060008054906101000a90046001600160a01b03166001600160a01b031663a21a23e46040518163ffffffff1660e01b81526004016020604051808303816000875af115801562000330573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000356919062000475565b600880546001600160401b0319166001600160401b039290921691821790556000805483516001600160a01b0390911692637341c10c929091859190620003a157620003a16200045f565b60200260200101516040518363ffffffff1660e01b8152600401620003e49291906001600160401b039290921682526001600160a01b0316602082015260400190565b600060405180830381600087803b158015620003ff57600080fd5b505af115801562000414573d6000803e3d6000fd5b5050505050565b6001600160a01b03929092168252602082015260400190565b6000602082840312156200044757600080fd5b815180151581146200045857600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200048857600080fd5b81516001600160401b03811681146200045857600080fd5b608051611305620004c3600039600081816107f7015261083901526113056000f3fe6080604052600436106100b75760003560e01c8062f714ce146100bc5780630c997597146100de5780630d5de6df146100f15780630e27e3df1461011f578063112940f91461013f5780631fe543e31461015f57806386850e931461017f5780638ac000211461019f57806393d81d58146101cc578063a0f0a1e3146101ec578063a3ced7b914610267578063b97229b91461028c578063e0c86289146102ae578063e89e106a146102c3578063f6eaffc8146102e7575b600080fd5b3480156100c857600080fd5b506100dc6100d7366004610daa565b610307565b005b6100dc6100ec366004610de8565b6103a1565b3480156100fd57600080fd5b50610106610665565b6040516101169493929190610e14565b60405180910390f35b34801561012b57600080fd5b506100dc61013a366004610e92565b6106fd565b34801561014b57600080fd5b506100dc61015a366004610e92565b61078f565b34801561016b57600080fd5b506100dc61017a366004610f1f565b6107ec565b34801561018b57600080fd5b506100dc61019a366004610fc0565b610874565b3480156101ab57600080fd5b506008546101bf906001600160401b031681565b6040516101169190610fd9565b3480156101d857600080fd5b506100dc6101e7366004610e92565b61093a565b3480156101f857600080fd5b5061023b610207366004610fc0565b60096020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff1684565b604080516001600160a01b03909516855260208501939093529183015215156060820152608001610116565b34801561027357600080fd5b5061027c610a4c565b6040519015158152602001610116565b34801561029857600080fd5b506102a1610b0d565b6040516101169190610fed565b3480156102ba57600080fd5b506100dc610c14565b3480156102cf57600080fd5b506102d960075481565b604051908152602001610116565b3480156102f357600080fd5b506102d9610302366004610fc0565b610ce9565b600854600160401b90046001600160a01b0316331461032557600080fd5b60015460405163a9059cbb60e01b81526001600160a01b038381166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015610378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039c919061105c565b505050565b66b1a2bc2ec5000060008290036103c0575066b1a2bc2ec5000061046f565b816001036103d7575067016345785d8a000061046f565b816002036103ee57506703782dace9d9000061046f565b8160030361040557506706f05b59d3b2000061046f565b8160040361041c5750670de0b6b3a764000061046f565b816005036104335750671bc16d674ec8000061046f565b60405162461bcd60e51b815260206004820152600c60248201526b696e76616c6964206d6f646560a01b60448201526064015b60405180910390fd5b803410156104ac5760405162461bcd60e51b815260206004820152600a602482015269131bddc8185b5bdd5b9d60b21b6044820152606401610466565b60006006600b54815481106104c3576104c3611079565b90600052602060002001549050600084156104eb576104e360028361108f565b1590506104fb565b6104f660028361108f565b151590505b604080516080810182523381524260208201529081018390528115156060820152600a8054600191906000906105329084906110c7565b9091555050600a54600090815260096020908152604091829020835181546001600160a01b0319166001600160a01b0390911617815590830151600182015590820151600282015560608201516003909101805460ff191691151591909117905581156105d257336108fc6105a83460026110df565b6040518115909202916000818181858888f193505050501580156105d0573d6000803e3d6000fd5b505b600b80549060006105e2836110fe565b9091555050600554600b54600160301b90910463ffffffff16900361065d576000600b81905550306001600160a01b031663e0c862896040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561064457600080fd5b505af1158015610658573d6000803e3d6000fd5b505050505b505050505050565b6000805460085460405163523e3b4b60e11b8152839283926060926001600160a01b039092169163a47c7696916106aa916001600160401b0390911690600401610fd9565b600060405180830381865afa1580156106c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106ef9190810190611117565b935093509350935090919293565b600854600160401b90046001600160a01b0316331461071b57600080fd5b600054600854604051639f87fad760e01b81526001600160a01b0390921691639f87fad79161075a916001600160401b039091169085906004016111ff565b600060405180830381600087803b15801561077457600080fd5b505af1158015610788573d6000803e3d6000fd5b5050505050565b600854600160401b90046001600160a01b031633146107ad57600080fd5b600054600854604051631cd0704360e21b81526001600160a01b0390921691637341c10c9161075a916001600160401b039091169085906004016111ff565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108665760405163073e64fd60e21b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604401610466565b6108708282610d0a565b5050565b600854600160401b90046001600160a01b0316331461089257600080fd5b6001546000546008546040516001600160a01b0393841693634000aea093169185916108ca916001600160401b031690602001610fd9565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016108f793929190611251565b6020604051808303816000875af1158015610916573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610870919061105c565b600854600160401b90046001600160a01b0316331461095857600080fd5b6008546001600160401b03166109c85760405162461bcd60e51b815260206004820152602f60248201527f4120737562736372697074696f6e20646f6573206e6f7420657869737420666f60448201526e1c881d1a1a5cc818dbdb9d1c9858dd608a1b6064820152608401610466565b600054600854604051630d7ae1d360e41b81526001600160a01b039092169163d7ae1d3091610a07916001600160401b039091169085906004016111ff565b600060405180830381600087803b158015610a2157600080fd5b505af1158015610a35573d6000803e3d6000fd5b5050600880546001600160401b0319169055505050565b6000805460085460405183926001600160a01b031691610a7a916001600160401b0390911690602401610fd9565b60408051601f198184030181529181526020820180516001600160e01b0316633a0ab5f560e21b17905251610aaf919061129a565b600060405180830381855afa9150503d8060008114610aea576040519150601f19603f3d011682016040523d82523d6000602084013e610aef565b606091505b5091505080806020019051810190610b07919061105c565b91505090565b60606000600a546001600160401b03811115610b2b57610b2b610eb6565b604051908082528060200260200182016040528015610b7d57816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610b495790505b50905060005b600a54811015610c0e57600081815260096020908152604091829020825160808101845281546001600160a01b0316815260018201549281019290925260028101549282019290925260039091015460ff16151560608201528251839083908110610bf057610bf0611079565b60200260200101819052508080610c06906110fe565b915050610b83565b50919050565b600854600160401b90046001600160a01b03163314610c3257600080fd5b600054600480546008546005546040516305d3b1d360e41b8152938401929092526001600160401b03166024830152600160201b810461ffff16604483015263ffffffff8082166064840152600160301b9091041660848201526001600160a01b0390911690635d3b1d309060a4016020604051808303816000875af1158015610cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce491906112b6565b600755565b60068181548110610cf957600080fd5b600091825260209091200154905081565b805160068054828255600082905261039c927ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f91820191602086018215610d6d579160200282015b82811115610d6d578251825591602001919060010190610d52565b50610d79929150610d7d565b5090565b5b80821115610d795760008155600101610d7e565b6001600160a01b0381168114610da757600080fd5b50565b60008060408385031215610dbd57600080fd5b823591506020830135610dcf81610d92565b809150509250929050565b8015158114610da757600080fd5b60008060408385031215610dfb57600080fd5b8235610e0681610dda565b946020939093013593505050565b6001600160601b03851681526001600160401b0384166020808301919091526001600160a01b038481166040840152608060608401819052845190840181905260009285810192909160a0860190855b81811015610e82578551841683529484019491840191600101610e64565b50909a9950505050505050505050565b600060208284031215610ea457600080fd5b8135610eaf81610d92565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610ef457610ef4610eb6565b604052919050565b60006001600160401b03821115610f1557610f15610eb6565b5060051b60200190565b60008060408385031215610f3257600080fd5b823591506020808401356001600160401b03811115610f5057600080fd5b8401601f81018613610f6157600080fd5b8035610f74610f6f82610efc565b610ecc565b81815260059190911b82018301908381019088831115610f9357600080fd5b928401925b82841015610fb157833582529284019290840190610f98565b80955050505050509250929050565b600060208284031215610fd257600080fd5b5035919050565b6001600160401b0391909116815260200190565b602080825282518282018190526000919060409081850190868401855b8281101561104f57815180516001600160a01b03168552868101518786015285810151868601526060908101511515908501526080909301929085019060010161100a565b5091979650505050505050565b60006020828403121561106e57600080fd5b8151610eaf81610dda565b634e487b7160e01b600052603260045260246000fd5b6000826110ac57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b600082198211156110da576110da6110b1565b500190565b60008160001904831182151516156110f9576110f96110b1565b500290565b600060018201611110576111106110b1565b5060010190565b6000806000806080858703121561112d57600080fd5b84516001600160601b038116811461114457600080fd5b602086810151919550906001600160401b03808216821461116457600080fd5b604088015191955061117582610d92565b60608801519194508082111561118a57600080fd5b508601601f8101881361119c57600080fd5b80516111aa610f6f82610efc565b81815260059190911b8201830190838101908a8311156111c957600080fd5b928401925b828410156111f05783516111e181610d92565b825292840192908401906111ce565b979a9699509497505050505050565b6001600160401b039290921682526001600160a01b0316602082015260400190565b60005b8381101561123c578181015183820152602001611224565b8381111561124b576000848401525b50505050565b60018060a01b03841681528260208201526060604082015260008251806060840152611284816080850160208701611221565b601f01601f191691909101608001949350505050565b600082516112ac818460208701611221565b9190910192915050565b6000602082840312156112c857600080fd5b505191905056fea2646970667358221220164f14281b1ee62818c7ebbcebc1eebc725b4dd52597eca46f16cbbd8f0a6c7c64736f6c634300080f0033";

type CoinFlipConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CoinFlipConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CoinFlip__factory extends ContractFactory {
  constructor(...args: CoinFlipConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CoinFlip> {
    return super.deploy(overrides || {}) as Promise<CoinFlip>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CoinFlip {
    return super.attach(address) as CoinFlip;
  }
  override connect(signer: Signer): CoinFlip__factory {
    return super.connect(signer) as CoinFlip__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CoinFlipInterface {
    return new utils.Interface(_abi) as CoinFlipInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CoinFlip {
    return new Contract(address, _abi, signerOrProvider) as CoinFlip;
  }
}
