/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  VRFv2Consumer,
  VRFv2ConsumerInterface,
} from "../../../contracts/TykheLuckyOracle.sol/VRFv2Consumer";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_randomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_requestId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a0604052600180546001600160a01b031916736a2aad07396b36fe02a22b33cf443582f682c82f1790557fd4bb89654db74673a187bd804519e65e3f71a52bc55f11da7601a13dcf5053146002556003805466020003000186a06001600160501b031990911617905534801561007557600080fd5b50604051610510380380610510833981016040819052610094916100e6565b6001546001600160a01b0316608081905260008054600680546001600160a01b031916331790556001600160401b03909316600160a01b026001600160e01b0319909316909117919091179055610116565b6000602082840312156100f857600080fd5b81516001600160401b038116811461010f57600080fd5b9392505050565b6080516103da6101366000396000818160a7015260e901526103da6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631fe543e314610051578063e0c8628914610066578063e89e106a1461006e578063f6eaffc814610089575b600080fd5b61006461005f3660046102a9565b61009c565b005b610064610128565b61007760055481565b60405190815260200160405180910390f35b610077610097366004610372565b6101fa565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461011a5760405163073e64fd60e21b81523360048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260440160405180910390fd5b610124828261021b565b5050565b6006546001600160a01b0316331461013f57600080fd5b6000546002546003546040516305d3b1d360e41b81526004810192909252600160a01b83046001600160401b03166024830152600160201b810461ffff16604483015263ffffffff8082166064840152600160301b9091041660848201526001600160a01b0390911690635d3b1d309060a4016020604051808303816000875af11580156101d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f5919061038b565b600555565b6004818154811061020a57600080fd5b600091825260209091200154905081565b805161022e906004906020840190610233565b505050565b82805482825590600052602060002090810192821561026e579160200282015b8281111561026e578251825591602001919060010190610253565b5061027a92915061027e565b5090565b5b8082111561027a576000815560010161027f565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156102bc57600080fd5b823591506020808401356001600160401b03808211156102db57600080fd5b818601915086601f8301126102ef57600080fd5b81358181111561030157610301610293565b8060051b604051601f19603f8301168101818110858211171561032657610326610293565b60405291825284820192508381018501918983111561034457600080fd5b938501935b8285101561036257843584529385019392850192610349565b8096505050505050509250929050565b60006020828403121561038457600080fd5b5035919050565b60006020828403121561039d57600080fd5b505191905056fea26469706673582212200961bc65a6977193b80dac0f6b846659350417abb8d73c3fef3ab05c1da05cb164736f6c634300080f0033";

type VRFv2ConsumerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VRFv2ConsumerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VRFv2Consumer__factory extends ContractFactory {
  constructor(...args: VRFv2ConsumerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VRFv2Consumer> {
    return super.deploy(
      subscriptionId,
      overrides || {}
    ) as Promise<VRFv2Consumer>;
  }
  override getDeployTransaction(
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(subscriptionId, overrides || {});
  }
  override attach(address: string): VRFv2Consumer {
    return super.attach(address) as VRFv2Consumer;
  }
  override connect(signer: Signer): VRFv2Consumer__factory {
    return super.connect(signer) as VRFv2Consumer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VRFv2ConsumerInterface {
    return new utils.Interface(_abi) as VRFv2ConsumerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VRFv2Consumer {
    return new Contract(address, _abi, signerOrProvider) as VRFv2Consumer;
  }
}
