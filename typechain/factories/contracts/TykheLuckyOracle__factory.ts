/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TykheLuckyOracle,
  TykheLuckyOracleInterface,
} from "../../contracts/TykheLuckyOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vrfCoordinator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_link_token_contract",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_keyHash",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_randomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_requestId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
    ],
    name: "setSubscriptionId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a0604052600180546001600160a01b031916736a2aad07396b36fe02a22b33cf443582f682c82f1790557fd4bb89654db74673a187bd804519e65e3f71a52bc55f11da7601a13dcf50531460035560048054660a0003000186a06001600160501b031990911617905534801561007557600080fd5b506040516105d63803806105d68339810160408190526100949161010c565b600180546001600160a01b03808216608081905260078054336001600160a01b03199182161790915560008054821690921790915591821695811695909517909155600280549091169290931691909117909155600355610148565b80516001600160a01b038116811461010757600080fd5b919050565b60008060006060848603121561012157600080fd5b61012a846100f0565b9250610138602085016100f0565b9150604084015190509250925092565b60805161046d6101696000396000818160c50152610107015261046d6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631fe543e31461005c578063e0c8628914610071578063e89e106a14610079578063ea7b4f7714610094578063f6eaffc8146100a7575b600080fd5b61006f61006a36600461030c565b6100ba565b005b61006f610146565b61008260065481565b60405190815260200160405180910390f35b61006f6100a23660046103d5565b61021a565b6100826100b5366004610405565b61025d565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101385760405163073e64fd60e21b81523360048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260440160405180910390fd5b610142828261027e565b5050565b6007546001600160a01b0316331461015d57600080fd5b600054600354600480546040516305d3b1d360e41b815291820192909252600160a01b83046001600160401b03166024820152600160201b820461ffff16604482015263ffffffff8083166064830152600160301b90920490911660848201526001600160a01b0390911690635d3b1d309060a4016020604051808303816000875af11580156101f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610215919061041e565b600655565b6007546001600160a01b0316331461023157600080fd5b600080546001600160401b03909216600160a01b02600160a01b600160e01b0319909216919091179055565b6005818154811061026d57600080fd5b600091825260209091200154905081565b8051610291906005906020840190610296565b505050565b8280548282559060005260206000209081019282156102d1579160200282015b828111156102d15782518255916020019190600101906102b6565b506102dd9291506102e1565b5090565b5b808211156102dd57600081556001016102e2565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561031f57600080fd5b823591506020808401356001600160401b038082111561033e57600080fd5b818601915086601f83011261035257600080fd5b813581811115610364576103646102f6565b8060051b604051601f19603f83011681018181108582111715610389576103896102f6565b6040529182528482019250838101850191898311156103a757600080fd5b938501935b828510156103c5578435845293850193928501926103ac565b8096505050505050509250929050565b6000602082840312156103e757600080fd5b81356001600160401b03811681146103fe57600080fd5b9392505050565b60006020828403121561041757600080fd5b5035919050565b60006020828403121561043057600080fd5b505191905056fea2646970667358221220e34f2ad1730eb8264eafd167b004ea21f69a127c480f6a84696029225cc0d74564736f6c634300080f0033";

type TykheLuckyOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TykheLuckyOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TykheLuckyOracle__factory extends ContractFactory {
  constructor(...args: TykheLuckyOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _vrfCoordinator: PromiseOrValue<string>,
    _link_token_contract: PromiseOrValue<string>,
    _keyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TykheLuckyOracle> {
    return super.deploy(
      _vrfCoordinator,
      _link_token_contract,
      _keyHash,
      overrides || {}
    ) as Promise<TykheLuckyOracle>;
  }
  override getDeployTransaction(
    _vrfCoordinator: PromiseOrValue<string>,
    _link_token_contract: PromiseOrValue<string>,
    _keyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _vrfCoordinator,
      _link_token_contract,
      _keyHash,
      overrides || {}
    );
  }
  override attach(address: string): TykheLuckyOracle {
    return super.attach(address) as TykheLuckyOracle;
  }
  override connect(signer: Signer): TykheLuckyOracle__factory {
    return super.connect(signer) as TykheLuckyOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TykheLuckyOracleInterface {
    return new utils.Interface(_abi) as TykheLuckyOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TykheLuckyOracle {
    return new Contract(address, _abi, signerOrProvider) as TykheLuckyOracle;
  }
}
